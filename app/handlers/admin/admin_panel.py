import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.database.models import Admin, CurrencyPair, BotSettings, Divergence
from app.keyboards.admin_kb import (
    get_admin_main_menu,
    get_bot_control_kb,
    get_pairs_menu_kb,
    get_settings_menu_kb,
    get_back_kb
)
from app.config import SUPERADMIN_IDS

logger = logging.getLogger(__name__)

router = Router()

async def process_admin_panel(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ–≤
    query = select(Admin).where(Admin.user_id == user_id)
    result = await session.execute(query) # type: ignore
    admin = result.scalar_one_or_none()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –Ω–æ –æ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if admin is None and user_id in SUPERADMIN_IDS:
        admin = Admin(
            user_id=user_id,
            username=message.from_user.username,
            is_superadmin=True,
            is_active=True
        )
        session.add(admin)
        await session.commit()

        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω."
        )
    elif admin is None:
        await message.answer('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')
        return 
    elif not admin.is_active:
        await message.answer('‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')
        return
    else:
        await message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_admin_main_menu(message)


@router.message(Command('admin'))
async def cmd_admin(message: Message, session: AsyncSession):
    await process_admin_panel(message, session)

async def show_admin_main_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await message.answer(
        'üîß <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>\n\n –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
        reply_markup=get_admin_main_menu(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == 'admin_main_menu')
async def cb_admin_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        'üîß <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>\n\n –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
        reply_markup=get_admin_main_menu(),
        parse_mode='HTML'
    )
    await callback.answer()

@router.callback_query(F.data == 'bot_control')
async def cb_bot_control(callback: CallbackQuery, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞ (–≤–∫–ª/–≤—ã–∫–ª)"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    query = select(BotSettings).where(BotSettings.key == 'bot_active')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    is_active = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
    if setting is not None and setting.value_bool is not None:
        is_active = setting.value_bool

    status_text = 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if is_active else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'

    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_bot_control_kb(is_active),
        parse_mode='HTML'
    )
    await callback.answer()

@router.callback_query(F.data == 'bot_activate')
async def cb_bot_active(callback: CallbackQuery, session: AsyncSession):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    query = select(BotSettings).where(BotSettings.key == 'bot_active')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    if setting is None:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        setting = BotSettings(key='bot_active', value_bool=True)
        session.add(setting)
    else:
        setting.value_bool = True

    await session.commit()

    await callback.message.edit_text(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</b>\n\n"
        "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n\n"
        "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è—Ö.",
        reply_markup=get_bot_control_kb(True),
        parse_mode='HTML'
    )
    await callback.answer('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')

@router.callback_query(F.data == 'bot_deactivate')
async def cb_bot_deactivate(callback: CallbackQuery, session: AsyncSession):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    query = select(BotSettings).where(BotSettings.key == 'bot_active')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    if setting is None:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        setting = BotSettings(key='bot_active', value_bool=False)
        session.add(setting)
    else:
        setting.value_bool = False

    await session.commit()

    await callback.message.edit_text(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</b>\n\n"
        "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
        "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è—Ö.",
        reply_markup=get_bot_control_kb(False),
        parse_mode='HTML'
    )
    await callback.answer('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

@router.callback_query(F.data == 'show_stats')
async def cb_show_stats(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
    pairs_query = select(CurrencyPair).where(CurrencyPair.is_active == True)
    pairs_result = await session.execute(pairs_query)
    active_pairs_count = len(pairs_result.scalars().all())

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
    all_pairs_query = select(CurrencyPair)
    all_pairs_result = await session.execute(all_pairs_query)
    all_pairs_count = len(all_pairs_result.scalars().all())

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π
    divergence_query = select(Divergence)
    divergence_result = await session.execute(divergence_query)
    divergence_count = len(divergence_result.scalars().all())

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    status_query = select(BotSettings).where(BotSettings.key == 'bot_active')
    status_result = await session.execute(status_query)
    status_setting = status_result.scalar_one_or_none()

    is_active = True
    if status_setting is not None and status_setting.value_bool is not None:
        is_active = status_setting.value_bool

    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    stats_message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status_text}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä: {active_pairs_count}/{all_pairs_count}\n"
        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π: {divergence_count}\n\n"
    )

    await callback.message.edit_text(
        stats_message,
        reply_markup=get_back_kb('admin_main_menu'),
        parse_mode='HTML'
    )
    await callback.answer()