import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.database.models import CurrencyPair
from app.keyboards.admin_kb import (
    get_pairs_menu_kb,
    get_back_kb,
    get_pairs_list_kb,
    get_pair_actions_kb,
    get_confirm_kb
)
from app.utils.states import AdminStates
from app.services.binance_api import BinanceAPI

logger = logging.getLogger(__name__)

router = Router()

@router.callback_query(F.data == 'pairs_management')
async def cb_pairs_management(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏"""
    await callback.message.edit_text(
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_pairs_menu_kb(),
        parse_mode='HTML'
    )
    await callback.answer()

@router.callback_query(F.data == 'add_pair')
async def cb_add_pair(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ BTCUSDT –∏–ª–∏ ETHBTC:",
        reply_markup=get_back_kb('pairs_management'),
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.add_pair_symbol)
    await callback.answer()

@router.message(StateFilter(AdminStates.add_pair_symbol))
async def process_add_pair_symbol(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
    symbol = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä–∞ –Ω–∞ Binance
    binance_api = BinanceAPI()
    is_valid = await binance_api.validate_pair(symbol)

    if not is_valid:
        await message.answer(
            '‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            reply_markup=get_back_kb('pairs_management')
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–∞—Ä–∞
    query = select(CurrencyPair).where(CurrencyPair.symbol == symbol)
    result = await session.execute(query)
    existing_pair = result.scalar_one_or_none()

    if existing_pair:
        await message.answer(
            f"‚ö†Ô∏è –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {symbol} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É.\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if existing_pair.is_active else '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}\n"
            f"–ü–æ—Ä–æ–≥ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏: {existing_pair.devergence_threshold}%",
            reply_markup=get_back_kb('pairs_management')
        )
        await state.clear()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∏ –∫–æ—Ç–∏—Ä—É–µ–º—ã–π –∞–∫—Ç–∏–≤—ã
    # –û–±—ã—á–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ - —ç—Ç–æ –∫–æ—Ç–∏—Ä—É–µ–º—ã–π –∞–∫—Ç–∏–≤ (USDT, BUSD –∏ —Ç.–¥.)
    # –ù–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ
    if len(symbol) <= 4:
        await message.answer(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ BTCUSDT –∏–ª–∏ ETHBTC.',
            reply_markup=get_back_kb('pairs_management')
        )
        return
    
    quote_asset = symbol[-4:] if symbol[-4:] in ['USDT', 'BUSD', 'USDC'] else symbol[-3:]
    base_asset = symbol[:len(symbol) - len(quote_asset)]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        symbol=symbol,
        base_asset=base_asset,
        quote_asset=quote_asset
    )

    await message.answer(
        f"üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –¥–ª—è {symbol}</b>\n\n"
        f"–ë–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤: {base_asset}\n"
        f"–ö–æ—Ç–∏—Ä—É–µ–º—ã–π –∞–∫—Ç–∏–≤: {quote_asset}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.0):",
        reply_markup=get_back_kb('pairs_management'),
        parse_mode='HTML'
    )
    
    await state.set_state(AdminStates.add_pair_threshold)

@router.message(StateFilter(AdminStates.add_pair_threshold))
async def process_add_pair_threshold(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏"""
    try:
        threshold = float(message.text.strip().replace(',', '.'))
        if threshold <= 0:
            raise ValueError('–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
    except ValueError:
        await message.answer(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, 5.0',
            reply_markup=get_back_kb('pairs_management')
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    symbol = data.get('symbol')
    base_asset = data.get('base_asset')
    quote_asset = data.get('quote_asset')

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É
    new_pair = CurrencyPair(
        symbol=symbol,
        base_asset=base_asset,
        quote_asset=quote_asset,
        is_active=True,
        devergence_threshold=threshold
    )

    session.add(new_pair)
    await session.commit()

    await message.answer(
        f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {symbol} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–ë–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤: {base_asset}\n"
        f"–ö–æ—Ç–∏—Ä—É–µ–º—ã–π –∞–∫—Ç–∏–≤: {quote_asset}\n"
        f"–ü–æ—Ä–æ–≥ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏: {threshold}%\n"
        f"–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞",
        reply_markup=get_back_kb('pairs_management')
    )

    await state.clear()

    