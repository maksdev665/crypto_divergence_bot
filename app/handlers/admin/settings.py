from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.database.models.settings import BotSettings
from app.keyboards.admin_kb import get_settings_menu_kb, get_back_kb
from app.utils.states import AdminStates
from app.config import DEFAULT_DIVERGENCE_THRESHOLD, CHECK_INTERVAL
import logging


logger = logging.getLogger(__name__)

router = Router()

@router.callback_query(F.data == 'bot_settings')
async def cb_bot_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_settings_menu_kb(),
        parse_mode='HTML'
    )
    await callback.answer()


@router.callback_query(F.data == 'set_group_id')
async def cb_set_group_id(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    query = select(BotSettings).where(BotSettings.key == 'notification_group_id')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    current_value = '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    if setting and setting.value:
        current_value = setting.value

    await callback.message.edit_text(
        "üì¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{current_value}</code>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è—Ö.\n\n"
        "<i>–í–∞–∂–Ω–æ: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.</i>",
        reply_markup=get_back_kb('bot_settings'),
        parse_mode='HTML'
    )
    await state.set_state(AdminStates.set_group_id)
    await callback.answer()


@router.message(StateFilter(AdminStates.set_group_id))
async def process_set_group_id(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã"""
    group_id = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not group_id.startswith('-100') and not group_id.lstrip('0').isdigit():
        await message.answer(
            '‚ùå ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            reply_markup=get_back_kb('bot_settings')
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    query = select(BotSettings).where(BotSettings.key == 'notification_group_id')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    if setting is None:
        setting = BotSettings(key='notification_group_id', value=group_id)
        session.add(setting)
    else:
        setting.value = group_id
    
    await session.commit()

    await message.answer(
        f"‚úÖ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{group_id}</code>",
        reply_markup=get_back_kb('bot_settings'),
        parse_mode='HTML'
    )
    
    await state.clear()


@router.callback_query(F.data == 'set_check_interval')
async def cb_set_check_interval(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    query = select(BotSettings).where(BotSettings.key == 'check_interval')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    current_value = CHECK_INTERVAL
    if setting and setting.value_int:
        current_value = setting.value_int

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–æ
    current_minutes = current_value // 60

    await callback.message.edit_text(
        "‚è± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_minutes} –º–∏–Ω—É—Ç\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 60):",
        reply_markup=get_back_kb('bot_settings'),
        parse_mode='HTML'
    )
    
    await state.set_state(AdminStates.set_check_interval)
    await callback.answer()


@router.message(StateFilter(AdminStates.set_check_interval))
async def process_set_check_interval(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        interval_minutes = int(message.text.strip())
        if interval_minutes < 1 or interval_minutes > 60:
            raise ValueError('–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç')
    except ValueError:
        await message.answer(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60.',
            reply_markup=get_back_kb('bot_settings')
        )
        return
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
    interval_seconds = interval_minutes * 60

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    query = select(BotSettings).where(BotSettings.key == 'check_interal')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    if setting is None:
        setting = BotSettings(key='check_interval', value_int=interval_seconds)
        session.add(setting)
    else:
        setting.value_int = interval_seconds

    await session.commit()

    await message.answer(
        f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval_minutes} –º–∏–Ω—É—Ç",
        reply_markup=get_back_kb('bot_settings')
    )

    await state.clear()


@router.callback_query(F.data == 'set_default_threshold')
async def cb_set_default_threshold(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    query = select(BotSettings).where(BotSettings.key == 'default_divergence_threshold')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    current_value = DEFAULT_DIVERGENCE_THRESHOLD
    if setting and setting.value_float:
        current_value = setting.value_float

    await callback.message.edit_text(
        "üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}%\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.0):",
        reply_markup=get_back_kb('bot_settings'),
        parse_mode='HTML'
    )

    await state.set_state(AdminStates.set_default_threshold)
    await callback.answer()


@router.message(StateFilter(AdminStates.set_default_threshold))
async def process_set_default_threshold(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        threshold = float(message.text.strip().replace(',', '.'))
        if threshold <= 0:
            raise ValueError('–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, 5.0",
            reply_markup=get_back_kb('bot_settings')
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    query = select(BotSettings).where(BotSettings.key == 'default_divergence_threshold')
    result = await session.execute(query)
    setting = result.scalar_one_or_none()

    if setting is None:
        setting = BotSettings(key='default_divergence_threshold')
        session.add(setting)
    else:
        setting.value_float = threshold
    
    await session.commit()

    await message.answer(
        f"‚úÖ –ü–æ—Ä–æ–≥ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold}%",
        reply_markup=get_back_kb('bot_settings')
    )
    
    await state.clear()

