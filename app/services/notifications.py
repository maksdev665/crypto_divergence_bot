import logging
from typing import List, Optional
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.database.models import Divergence, BotSettings
from app.config import NOTIFICATION_GROUP_ID

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è—Ö –≤ Telegram"""

    def __init__(self, bot: Bot, session: AsyncSession):
        self.bot = bot
        self.session = session

    async def get_notification_group_id(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞"""
        query = select(BotSettings).where(BotSettings.key == 'notification_group_id')
        result = await self.session.execute(query)
        setting = result.scalar_one_or_none()

        if setting and setting.value:
            return setting.value
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        return NOTIFICATION_GROUP_ID
    
    async def get_bot_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        query = select(BotSettings).where(BotSettings.key == 'bot_active')
        result = await self.session.execute(query)
        setting = result.scalar_one_or_none()

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
        if setting is None or setting.value_bool is None:
            return  True
        
        return setting.value_bool
    
    async def format_divergence_message(self, divergence: Divergence) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        message = (
            f"üîî <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è!</b>\n\n"
            f"<b>–ü–∞—Ä—ã:</b> {divergence.pair1_symbol} –∏ {divergence.pair2_symbol}\n"
            f"<b>–í–µ–ª–∏—á–∏–Ω–∞:</b> {abs(divergence.divergence_percent):.2f}%\n"
            f"<b>–í—Ä–µ–º—è:</b> {divergence.detected_at.strftime('%d.%m.%Y %H:%M:%S')} UTC\n\n"
            f"<b>–¶–µ–Ω—ã:</b>\n"
            f"‚Ä¢ {divergence.pair1_symbol}: {divergence.pair1_price:.8f}\n"
            f"‚Ä¢ {divergence.pair2_symbol}: {divergence.pair2_price:.8f}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if divergence.divergence_percent > 0:
            message += 'üìà –ü–∞—Ä—ã <b>—Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è</b>'
        else:
            message += 'üìâ –ü–∞—Ä—ã <b>—Å—Ö–æ–¥—è—Ç—Å—è</b>'

        return message
    
    async def test_message(self) -> str:
        return 'üìà –ü–∞—Ä—ã <b>—Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è</b>'
    
    async def send_divergence_notification(self, divergence: Divergence) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –≤ Telegram –≥—Ä—É–ø–ø—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
        if not await self.get_bot_status():
            logger.info('–ë–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è')
            return False
        
        group_id = await self.get_notification_group_id()
        if not group_id:
            logger.error('ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return False
        
        # message = await self.format_divergence_message(divergence)
        message = await self.test_message()
        print(group_id)
        try:
            await self.bot.send_message(
                chat_id=group_id,
                text=message,
                parse_mode='HTML'
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False
        
    async def process_pending_notifications(self) -> int:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è—Ö
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        query = select(Divergence).where(Divergence.notification_sent == False)
        result = await self.session.execute(query)
        pending_divergence = result.scalars().all()

        if not pending_divergence:
            return 0
        
        sent_count = 0
        for divergence in pending_divergence:
            success = await self.send_divergence_notification(divergence)
            if success:
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                divergence.notification_sent = True
                sent_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        await self.session().commit()
        return sent_count()

